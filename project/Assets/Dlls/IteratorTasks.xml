<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IteratorTasks</name>
    </assembly>
    <members>
        <member name="T:IteratorTasks.AggregateException">
            <summary>
            複数の例外を束ねる例外クラス。
            並行動作してると、複数のタスク内で同時に例外が発生する可能性があるので。
            </summary>
        </member>
        <member name="P:IteratorTasks.AggregateException.IsHandled">
            <summary>
               処理済みフラグ。
               このフラグが立っていない例外があった場合、TaskScheduler.UnhandledException イベントが発生。
               （手動で立てる。既定では false のままなので、必ずイベント発生。）
               （.NET 4のTaskのUnobservedTaskExceptionみたいに、Errorプロパティを誰かが参照しただけで立つフラグみたいな機構は持ってない。）
            </summary>
        </member>
        <member name="P:IteratorTasks.AggregateException.Exceptions">
            <summary>
            例外一覧。
            </summary>
        </member>
        <member name="M:IteratorTasks.AggregateException.#ctor(System.Exception[])">
            <summary>
            params 配列版。
            </summary>
            <param name="exceptions"></param>
        </member>
        <member name="M:IteratorTasks.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            IEnumerable 版。
            </summary>
            <param name="exceptions"></param>
        </member>
        <member name="P:IteratorTasks.AggregateException.Message">
            <summary>
            <see cref="P:IteratorTasks.AggregateException.Exceptions"/> が1個だけならそれの <see cref="P:System.Exception.Message"/> をそのまま、
            複数なら個数を表示。
            </summary>
        </member>
        <member name="M:IteratorTasks.AggregateException.ToString">
            <summary>
            <see cref="P:IteratorTasks.AggregateException.Exceptions"/> を全部表示。
            </summary>
            <returns></returns>
        </member>
        <member name="T:IteratorTasks.IAwaiter">
            <summary>
            await 可能なものに実装するインターフェイス。
            本家 Task で言うところの awaitable/awaiter パターン用。
            こっちでは await は使えなくて、yield return で返す。
            <see cref="T:IteratorTasks.TaskScheduler"/> 内で、このインターフェイスが来たら「中断と再開」処理をやる。
            </summary>
        </member>
        <member name="P:IteratorTasks.IAwaiter.IsCompleted">
            <summary>
            すでに完了済みかどうか。
            </summary>
        </member>
        <member name="M:IteratorTasks.IAwaiter.OnCompleted(System.Action)">
            <summary>
            非同期処理が終わった時のコールバックを呼んでもらう。
            </summary>
            <param name="continuation">継続処理。</param>
        </member>
        <member name="T:IteratorTasks.IProgress`1">
            <summary>
            進捗報告用のインターフェイス。
            </summary>
            <typeparam name="T">進捗度合を表す型。</typeparam>
        </member>
        <member name="M:IteratorTasks.IProgress`1.Report(`0)">
            <summary>
            現在の進捗状況をレポート。
            </summary>
            <param name="value">現在の進捗状況。</param>
        </member>
        <member name="T:IteratorTasks.Progress`1">
            <summary>
            イベントを使って進捗報告を受け取るためのクラス。
            </summary>
            <typeparam name="T">進捗度合を表す型。</typeparam>
        </member>
        <member name="M:IteratorTasks.Progress`1.#ctor">
            <summary>
            後から <see cref="E:IteratorTasks.Progress`1.ProgressChanged"/> でハンドラーを追加する想定。
            </summary>
        </member>
        <member name="M:IteratorTasks.Progress`1.#ctor(System.Action{`0})">
            <summary>
            最初からハンドラーを1つ追加するコンストラクター。
            </summary>
            <param name="onProgressChanged"></param>
        </member>
        <member name="E:IteratorTasks.Progress`1.ProgressChanged">
            <summary>
            進捗状況が変化したときに起こすイベント。
            </summary>
        </member>
        <member name="T:IteratorTasks.CancellationToken">
            <summary>
            タスクのキャンセル用トークン。
            キャンセルを受ける側。
            </summary>
        </member>
        <member name="P:IteratorTasks.CancellationToken.IsCancellationRequested">
            <summary>
            キャンセル要求が出ているかどうか。
            </summary>
        </member>
        <member name="M:IteratorTasks.CancellationToken.Register(System.Action)">
            <summary>
            キャンセル要求時に通知を受け取るためのデリゲートを登録。
            </summary>
            <param name="onCanceled">キャンセル要求時に呼ばれるデリゲート。</param>
        </member>
        <member name="F:IteratorTasks.CancellationToken.None">
            <summary>
            空のトークン。
            </summary>
        </member>
        <member name="M:IteratorTasks.CancellationToken.ThrowIfCancellationRequested">
            <summary>
            キャンセル要求が出ている場合、OperationCanceledException をスローする。
            </summary>
        </member>
        <member name="T:IteratorTasks.CancellationTokenSource">
            <summary>
            タスクのキャンセル用トークン。
            キャンセルする側。
            </summary>
        </member>
        <member name="M:IteratorTasks.CancellationTokenSource.#ctor">
            <summary>
            初期化。
            </summary>
        </member>
        <member name="P:IteratorTasks.CancellationTokenSource.Token">
            <summary>
            キャンセル用トークン。
            </summary>
        </member>
        <member name="P:IteratorTasks.CancellationTokenSource.IsCancellationRequested">
            <summary>
            キャンセル要求を出したかどうか。
            </summary>
        </member>
        <member name="M:IteratorTasks.CancellationTokenSource.Cancel">
            <summary>
            キャンセル。
            </summary>
        </member>
        <member name="M:IteratorTasks.CancellationTokenSource.Cancel(System.Exception)">
            <summary>
            キャンセルの原因となる例外を指定してのキャンセル要求。
            </summary>
        </member>
        <member name="T:IteratorTasks.Task">
            <summary>
            .NET 4 の Task 的にコルーチンを実行するためのクラス。
            戻り値なし版。
            </summary>
        </member>
        <member name="F:IteratorTasks.Task._updated">
            <summary>
            TaskScheduler で使うフラグ。
            RunTask の直前で落として、RunTask 実行後に立てる。
            あんまり internal にしたくないけども妥協。
            </summary>
        </member>
        <member name="M:IteratorTasks.Task.#ctor(System.Collections.IEnumerator)">
            <summary>
            イテレーターからタスクを作る。
            </summary>
            <param name="routine"></param>
        </member>
        <member name="M:IteratorTasks.Task.#ctor(System.Func{System.Collections.IEnumerator})">
            <summary>
            イテレーター生成メソッドを渡してタスクを作る。
            </summary>
            <param name="routine"></param>
        </member>
        <member name="P:IteratorTasks.Task.Routine">
            <summary>
            中で動いているコルーチン。
            </summary>
        </member>
        <member name="P:IteratorTasks.Task.Exception">
            <summary>
            タスク実行中に発生した例外。
            </summary>
        </member>
        <member name="M:IteratorTasks.Task.AddError(System.Exception)">
            <summary>
            例外を追加。
            <see cref="T:IteratorTasks.TaskCompletionSource`1"/> とかで、例外を伝搬させるために使う。
            </summary>
            <param name="exc"></param>
        </member>
        <member name="P:IteratorTasks.Task.Status">
            <summary>
            タスクの現在の状態。
            </summary>
        </member>
        <member name="P:IteratorTasks.Task.IsCompleted">
            <summary>
            正常・例外問わず、完了済みかどうか。
            </summary>
        </member>
        <member name="P:IteratorTasks.Task.IsCanceled">
            <summary>
            キャンセルされて終了した。
            </summary>
        </member>
        <member name="P:IteratorTasks.Task.IsFaulted">
            <summary>
            例外が出て終了した。
            </summary>
        </member>
        <member name="M:IteratorTasks.Task.Complete">
            <summary>
            終了処理。
            </summary>
        </member>
        <member name="P:IteratorTasks.Task.Cancellation">
            <summary>
            このタスクをキャンセルするためのトークン。
            </summary>
        </member>
        <member name="M:IteratorTasks.Task.Cancel">
            <summary>
            タスクをキャンセルします。
            CancellationToken 越しにキャンセルするので、コルーチン側が対応していない場合には即座にはタスク終了しない。
            Task を作るときに CancellationToken を渡していないものに対して呼び出すと例外発生。
            </summary>
            <remarks>
            注: 本家 Task にはないもの。
            </remarks>
        </member>
        <member name="M:IteratorTasks.Task.TryCancel">
            <summary>
            タスクをキャンセルします。
            Task を作るときに CancellationToken を渡していないものに対して呼び出すと何もしない。
            </summary>
            <remarks>
            注: 本家 Task にはないもの。
            </remarks>
        </member>
        <member name="M:IteratorTasks.Task.Cancel(System.Exception)">
            <summary>
            Cancel と同様。
            キャンセル理由を指定できるバージョン。
            </summary>
            <param name="e">キャンセル理由。</param>
        </member>
        <member name="P:IteratorTasks.Task.DefaultScheduler">
            <summary>
            既定のタスクスケジューラー。
            </summary>
        </member>
        <member name="P:IteratorTasks.Task.Scheduler">
            <summary>
            このタスクに紐づいているスケジューラー。
            </summary>
        </member>
        <member name="M:IteratorTasks.Task.Start">
            <summary>
            タスク開始。
            new Task(ルーチン) しただけだと開始してない状態（cold start）なので、Startを呼ぶ必要がある。
            Task.Run(ルーチン) なら介した状態（hot start）のタスクが返る。
            </summary>
        </member>
        <member name="M:IteratorTasks.Task.Start(IteratorTasks.TaskScheduler)">
            <summary>
            スケジューラーを明示してタスク開始。
            </summary>
            <param name="scheduler"></param>
        </member>
        <member name="M:IteratorTasks.Task.Run(System.Collections.IEnumerator)">
            <summary>
            開始済みのタスクを作る。
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Run(System.Collections.IEnumerator,IteratorTasks.TaskScheduler)">
            <summary>
            スケジューラーを指定して開始済みのタスクを作る。
            </summary>
            <param name="routine"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Run(System.Func{System.Collections.IEnumerator})">
            <summary>
            開始済みのタスクを作る。
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Run(System.Func{IteratorTasks.CancellationToken,System.Collections.IEnumerator},IteratorTasks.CancellationTokenSource)">
            <summary>
            開始済みのタスクを作る。
            キャンセル可能。
            </summary>
            <param name="routine"></param>
            <param name="cts"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Run(System.Func{IteratorTasks.CancellationToken,System.Collections.IEnumerator},IteratorTasks.CancellationTokenSource,IteratorTasks.TaskScheduler)">
            <summary>
            開始済みのタスクを作る。
            キャンセル可能。
            </summary>
            <param name="routine"></param>
            <param name="cts"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Run(System.Func{System.Collections.IEnumerator},IteratorTasks.TaskScheduler)">
            <summary>
            スケジューラーを指定して開始済みのタスクを作る。
            </summary>
            <param name="routine"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Run``1(System.Func{System.Action{``0},System.Collections.IEnumerator})">
            <summary>
            イテレーターを渡して開始済みのタスクを作る。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Run``1(System.Func{System.Action{``0},IteratorTasks.CancellationToken,System.Collections.IEnumerator},IteratorTasks.CancellationTokenSource)">
            <summary>
            イテレーターを渡して開始済みのタスクを作る。
            キャンセル可能。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routine"></param>
            <param name="cts"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Run``1(System.Func{System.Action{``0},IteratorTasks.CancellationToken,System.Collections.IEnumerator},IteratorTasks.CancellationTokenSource,IteratorTasks.TaskScheduler)">
            <summary>
            イテレーターを渡して開始済みのタスクを作る。
            キャンセル可能。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routine"></param>
            <param name="cts"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Run``1(System.Func{System.Action{``0},System.Collections.IEnumerator},IteratorTasks.TaskScheduler)">
            <summary>
            イテレーターを渡して開始済みのタスクを作る。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routine"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.FromResult``1(``0)">
            <summary>
            ただの値をタスク化。
            作ったタスクは、最初から完了済みで、Result で値を取れる。
            </summary>
        </member>
        <member name="P:IteratorTasks.Task.CompletedTask">
            <summary>
            完了済みのタスクを取得する。
            </summary>
            <remarks>
            その時点でのDefaultSchedularを拾う。
            (毎回新しいタスクインスタンスを作成する)
            </remarks>
        </member>
        <member name="M:IteratorTasks.Task.FromException``1(System.Exception)">
            <summary>
            例外を直接渡して、最初から完了済みのタスクを作る。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.FromException(System.Exception)">
            <summary>
            例外を直接渡して、最初から完了済みのタスクを作る。
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.WhenAll(IteratorTasks.Task[])">
            <summary>
            複数のタスクが完了するのを待つタスクを作る。
            </summary>
            <param name="tasks"></param>
            <returns></returns>
            <remarks>
            foreach しかしてないのに IEnumerable 版がないのは、遅延評価されたくないから。
            </remarks>
        </member>
        <member name="M:IteratorTasks.Task.ContinueWithInternal``1(System.Func{IteratorTasks.Task})">
            <summary>
            <see cref="M:IteratorTasks.Task.ContinueWith(System.Action{IteratorTasks.Task})"/> の内部実装。
            <see cref="T:IteratorTasks.Task"/> と <see cref="T:IteratorTasks.Task`1"/> での共通処理。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="starter"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.ContinueWithInternal``1(System.Func{``0})">
            <summary>
            <see cref="M:IteratorTasks.Task.ContinueWith(System.Action{IteratorTasks.Task})"/> の内部実装。
            <see cref="T:IteratorTasks.Task"/> と <see cref="T:IteratorTasks.Task`1"/> での共通処理。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.ContinueWith(System.Action{IteratorTasks.Task})">
            <summary>
            タスク完了後に別の処理を行う。
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.ContinueWith``1(System.Func{IteratorTasks.Task,``0})">
            <summary>
            タスク完了後に別の処理を行う。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.ContinueWithIterator(System.Func{IteratorTasks.Task,System.Collections.IEnumerator})">
            <summary>
            タスク完了後に別の処理を行う。
            イテレーターを渡して新しいタスクを起動。
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.ContinueWithIterator``1(System.Func{IteratorTasks.Task,System.Action{``0},System.Collections.IEnumerator})">
            <summary>
            タスク完了後に別の処理を行う。
            イテレーターを渡して新しいタスクを起動。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.ContinueWithTask(System.Func{IteratorTasks.Task,IteratorTasks.Task})">
            <summary>
            タスク完了後に別の処理を行う。
            タスク開始用のメソッドを渡して、新しいタスクを起動。
            </summary>
            <param name="starter"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.ContinueWithTask``1(System.Func{IteratorTasks.Task,IteratorTasks.Task{``0}})">
            <summary>
            タスク完了後に別の処理を行う。
            タスク開始用のメソッドを渡して、新しいタスクを起動。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="starter"></param>
            <returns></returns>
        </member>
        <member name="P:IteratorTasks.Task.IsHandled">
            <summary>
            例外に処理済みフラグを立てる。
            </summary>
        </member>
        <member name="M:IteratorTasks.Task.WhenAny``1(IteratorTasks.Task{``0}[])">
            <summary>
            複数のタスクのうち、最初に終わったタスクを返す。
            </summary>
        </member>
        <member name="M:IteratorTasks.Task.WhenAny``1(IteratorTasks.TaskScheduler,IteratorTasks.Task{``0}[])">
            <summary>
            複数のタスクのうち、最初に終わったタスクを返す。
            </summary>
        </member>
        <member name="M:IteratorTasks.Task.WhenAny(IteratorTasks.Task[])">
            <summary>
            複数のタスクのうち、最初に終わったタスクを返す。
            </summary>
        </member>
        <member name="M:IteratorTasks.Task.WhenAny(IteratorTasks.TaskScheduler,IteratorTasks.Task[])">
            <summary>
            複数のタスクのうち、最初に終わったタスクを返す。
            </summary>
            <param name="tasks">最初の1つを待ちたいタスク一覧。</param>
            <param name="scheduler">このタスクを実行するスケジューラ。</param>
            <returns>最初の1つだけ終わったら完了になるタスク。</returns>
        </member>
        <member name="M:IteratorTasks.Task.Delay(System.TimeSpan)">
            <summary>
            遅延後に完了するタスクを作成します。
            </summary>
            <param name="span">返されたタスクを完了する前に待機する時間。</param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Delay(System.Int32)">
            <summary>
            遅延後に完了するタスクを作成します。
            </summary>
            <param name="delayMilliseconds">返されたタスクを完了する前までのミリ秒単位の待機時間。</param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Delay(System.Int32,IteratorTasks.TaskScheduler)">
            <summary>
            遅延後に完了するタスクを作成します。
            </summary>
            <param name="delayMilliseconds">返されたタスクを完了する前までのミリ秒単位の待機時間。</param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Delay(System.TimeSpan,IteratorTasks.CancellationToken)">
            <summary>
            遅延後に完了するタスクを作成します。
            </summary>
            <param name="span">返されたタスクを完了する前に待機する時間。</param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Delay(System.Int32,IteratorTasks.CancellationToken)">
            <summary>
            遅延後に完了するタスクを作成します。
            </summary>
            <param name="delayMilliseconds">返されたタスクを完了する前までのミリ秒単位の待機時間。</param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task.Delay(System.Int32,IteratorTasks.CancellationToken,IteratorTasks.TaskScheduler)">
            <summary>
            遅延後に完了するタスクを作成します。
            </summary>
            <param name="delayMilliseconds">返されたタスクを完了する前までのミリ秒単位の待機時間。</param>
            <param name="ct"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="T:IteratorTasks.TaskCanceledException">
            <summary>
            タスクがキャンセルされた。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskCanceledException.#ctor">
            <summary>
            何も指定なし。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskCanceledException.#ctor(IteratorTasks.Task)">
            <summary>
            キャンセルしたタスクを指定。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskCanceledException.#ctor(System.String)">
            <summary>
            メッセージ指定。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IteratorTasks.TaskCanceledException.#ctor(System.String,System.Exception)">
            <summary>
            メッセージと内部例外指定。
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:IteratorTasks.TaskCompletionSource`1">
            <summary>
            いわゆる promise。
            Task 非同期以外の非同期処理を Task 化するために使う。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IteratorTasks.TaskCompletionSource`1.Task">
            <summary>
            作った Task。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskCompletionSource`1.#ctor">
            <summary>
            既定のスケジューラーを使う。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskCompletionSource`1.#ctor(IteratorTasks.TaskScheduler)">
            <summary>
            スケジューラー指定。
            </summary>
            <param name="scheduler"></param>
        </member>
        <member name="M:IteratorTasks.TaskCompletionSource`1.TrySetCanceled">
            <summary>
            キャンセルする。
            完了済みの場合は何もしない。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskCompletionSource`1.TrySetException(System.Exception)">
            <summary>
            例外扱いで終了する。
            完了済みの場合は何もしない。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskCompletionSource`1.TrySetResult(`0)">
            <summary>
            正常終了する。
            完了済みの場合は何もしない。
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:IteratorTasks.TaskCompletionSource`1.SetCanceled">
            <summary>
            キャンセルする。
            完了済みのものに対して呼ぶと invalid operation。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskCompletionSource`1.SetException(System.Exception)">
            <summary>
            例外扱いで終了する。
            完了済みのものに対して呼ぶと invalid operation。
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:IteratorTasks.TaskCompletionSource`1.SetResult(`0)">
            <summary>
            正常終了する。
            完了済みのものに対して呼ぶと invalid operation。
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:IteratorTasks.Task`1">
            <summary>
            .NET 4 の Task 的にコルーチンを実行するためのクラス。
            戻り値あり版。
            </summary>
            <typeparam name="T">最終的に返す型。</typeparam>
        </member>
        <member name="P:IteratorTasks.Task`1.Result">
            <summary>
            最終的に返したい値。
            </summary>
        </member>
        <member name="M:IteratorTasks.Task`1.#ctor(System.Func{System.Action{`0},System.Collections.IEnumerator})">
            <summary>
            コルーチンのスタート用関数を渡して初期化。
            </summary>
            <param name="routine">コルーチンのスタート用関数。</param>
        </member>
        <member name="M:IteratorTasks.Task`1.ContinueWith(System.Action{IteratorTasks.Task{`0}})">
            <summary>
            ターゲットの <see cref="T:IteratorTasks.Task"/> が完了したときに非同期に実行する継続タスクを作成します。 
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task`1.ContinueWith``1(System.Func{IteratorTasks.Task{`0},``0})">
            <summary>
            ターゲットの <see cref="T:IteratorTasks.Task"/> が完了したときに非同期に実行する継続タスクを作成します。 
            </summary>
            <typeparam name="U"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task`1.ContinueWithIterator(System.Func{IteratorTasks.Task{`0},System.Collections.IEnumerator})">
            <summary>
            ターゲットの <see cref="T:IteratorTasks.Task"/> が完了したときに非同期に実行する継続タスクを作成します。 
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task`1.ContinueWithIterator``1(System.Func{IteratorTasks.Task{`0},System.Action{``0},System.Collections.IEnumerator})">
            <summary>
            ターゲットの <see cref="T:IteratorTasks.Task"/> が完了したときに非同期に実行する継続タスクを作成します。 
            </summary>
            <typeparam name="U"></typeparam>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task`1.ContinueWithTask(System.Func{IteratorTasks.Task{`0},IteratorTasks.Task})">
            <summary>
            ターゲットの <see cref="T:IteratorTasks.Task"/> が完了したときに非同期に実行する継続タスクを作成します。 
            </summary>
            <param name="starter"></param>
            <returns></returns>
        </member>
        <member name="M:IteratorTasks.Task`1.ContinueWithTask``1(System.Func{IteratorTasks.Task{`0},IteratorTasks.Task{``0}})">
            <summary>
            ターゲットの <see cref="T:IteratorTasks.Task"/> が完了したときに非同期に実行する継続タスクを作成します。 
            </summary>
            <typeparam name="U"></typeparam>
            <param name="starter"></param>
            <returns></returns>
        </member>
        <member name="T:IteratorTasks.TaskCompletionSourceExtensions">
            <summary>
            <see cref="T:IteratorTasks.TaskCompletionSource`1"/> の拡張。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskCompletionSourceExtensions.WithCancellation``1(IteratorTasks.TaskCompletionSource{``0},IteratorTasks.CancellationToken)">
            <summary>
            <paramref name="ct"/> がキャンセルされたときに自動的にこちらもキャンセルされる <see cref="T:IteratorTasks.TaskCompletionSource`1"/> を作る。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tcs"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="T:IteratorTasks.TaskScheduler">
            <summary>
            <see cref="T:IteratorTasks.Task"/> の実行スケジューラー。
            </summary>
        </member>
        <member name="P:IteratorTasks.TaskScheduler.Id">
            <summary>
            主に診断用。
            スケジューラーのID。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskScheduler.#ctor">
            <summary>
            <see cref="P:IteratorTasks.TaskScheduler.Id"/> を連番で振る。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskScheduler.#ctor(System.Int32)">
            <summary>
            主に診断用。
            ID を直接指定。
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskScheduler._runningTasks">
            <summary>
            実行中のタスク。
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskScheduler._suspendedTasks">
            <summary>
            サスペンド中（他のタスクの完了待ちとか）のタスク。
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskScheduler.sync">
            <summary>
            ロック用オブジェクト
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskScheduler._continuationActions">
            <summary>
            ContinueWith とかで実行したい処理。
            コルーチンと違って即実行、同期処理。
            ただし、スタックトレースが深くなりすぎないように、一度リストに貯めて呼ぶ。
            </summary>
        </member>
        <member name="P:IteratorTasks.TaskScheduler.Status">
            <summary>
            現在のスケジューラーの状態。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskScheduler.QueueTask(IteratorTasks.Task)">
            <summary>
            タスクをスケジューラーに登録。
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:IteratorTasks.TaskScheduler.QueueTask``1(IteratorTasks.TaskCompletionSource{``0})">
            <summary>
            タスク完了トークンをスケジューラーに登録。
            
            TaskCompletionSource 越しに作られるタスクは、実行自体はスケジューラーの管轄外ではあるものの、
            UnhandledException で未処理例外を拾うためには登録が必要。
            </summary>
            <param name="tcs"></param>
        </member>
        <member name="M:IteratorTasks.TaskScheduler.Shutdown(System.Action{IteratorTasks.TaskSchedulerStatus})">
            <summary>
            シャットダウン開始。
            シャットダウンを始めると、新規タスクの追加ができなくなる。
            現在実行中のタスクが全部終了するか、タイムアウトしたらcallbackが呼ばれる。
            </summary>
            <param name="callback"></param>
        </member>
        <member name="P:IteratorTasks.TaskScheduler.ShutdownTimeout">
            <summary>
            シャットダウン開始後、実行中のタスクの終了をどのくらいの時間待つか。
            この時間を過ぎると、強制終了。
            </summary>
        </member>
        <member name="P:IteratorTasks.TaskScheduler.RunningTasks">
            <summary>
            現在実行中のタスク。
            </summary>
        </member>
        <member name="P:IteratorTasks.TaskScheduler.SuspendedTasks">
            <summary>
            現在サスペンド状態のタスク。
            タスクの中で yield return IAwaiter すると、Awaiter の方が終わるまでタスクがサスペンドする。
            </summary>
        </member>
        <member name="P:IteratorTasks.TaskScheduler.IsActive">
            <summary>
            Running 状態のタスクが1つでもある。
            </summary>
        </member>
        <member name="P:IteratorTasks.TaskScheduler.HasAnyTask">
            <summary>
            Running もしくは Suspended なタスクが1つでもある。
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskScheduler.Cancel">
            <summary>
            RunningTasks と SuspendedTasks のすべてを強制キャンセルする。
            強制キャンセルされたタスクはCompleteが呼ばれないので注意
            </summary>
        </member>
        <member name="M:IteratorTasks.TaskScheduler.Update">
            <summary>
            1フレームに1回呼んでもらう前提のメソッド。
            </summary>
        </member>
        <member name="P:IteratorTasks.TaskScheduler.UpdateCount">
            <summary>
            <see cref="M:IteratorTasks.TaskScheduler.Update"/>が呼ばれた回数。
            </summary>
            <remarks>
            DEBUG 時のみにしたかったけども、#if DEBUG 内に入ってることに気づかないままテストコードで使かわれすぎてしまってて、もうどうしようもなさそう。
            </remarks>
        </member>
        <member name="M:IteratorTasks.TaskScheduler.Post(System.Action)">
            <summary>
            タスクの合間に（コルーチンでないただの）アクションを実行。
            スタックトレースを深くしないように、一度リストとして持っておいて実行。
            ContinueWith 用。
            </summary>
            <param name="action">実行したいアクション。</param>
        </member>
        <member name="E:IteratorTasks.TaskScheduler.UnhandledException">
            <summary>
            誰にも処理されなかった例外があった時に起こすイベント。
            
            スケジューラーの Update 内で、決定的なタイミングで呼ぼうとしてるがために、かえって使い勝手悪いかも。
            本家 .NET 4 の Task クラスだと、Finalizer でチェックしてる（この場合、タスクが完了直後には呼ばれないし、タイミングも不定）。
            </summary>
            <remarks>
            自動実装な event だと iOS で動作しないのでこういう作りに（他の同様の作りしてるものも同じ理由）。
            
            原因は C# 4.0 で生成されるコードが変わった（Interlocked.CompareExchange[T] を使った lock-free 同期）せい（Mono 2.6 の AOT の制限で、CompareExchange[T] 動かない）。
            
            対策としてこれまで、DLL は Unity 付属の MonoDevelop（Mono 2.6 だし、C# 3.0）でビルドしてた。
            
            C# 3.0 だとデリゲートのオーバーロード解決ルールが馬鹿すぎてしんどい（list.Select(x => Method(x)) って書かなきゃいけない。4.0 なら Select(Method) 可能）ので、
            いっそのこと自動実装 event を辞めてみることに（こっちの方が利用頻度低い）。
            
            Unity 前提なので、マルチスレッド動作は想定してない（lock とか使わない素の実装）。
            
            当然、こういう作りにしないと行けないのはゲーム本体で使うものだけ。
            Win 上の編集ツールだけで使うもの（ViewModels とか）に関しては自動実装 event でも問題出ない。
            </remarks>
        </member>
        <member name="E:IteratorTasks.TaskScheduler.ErrorOnUpdate">
            <summary>
            Update ループ中で意図しない例外が出てた時に呼ぶイベント。
            マルチスレッドがらみの競合とかでしか起きないと思う。
            競合回避コードも書いてるつもりだけども、マルチスレッドがらみのバグは頑張ってもとり切れないときはとり切れないので。
            </summary>
        </member>
        <member name="T:IteratorTasks.TaskSchedulerStatus">
            <summary>
            <see cref="T:IteratorTasks.TaskScheduler"/> の状態。
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskSchedulerStatus.Running">
            <summary>
            実行中。
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskSchedulerStatus.Shutdown">
            <summary>
            シャットダウン処理に入った。
            (以降は新規タスクをもう受け付けないけども、今あるタスクを実行中。)
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskSchedulerStatus.ShutdownCompleted">
            <summary>
            シャットダウン処理完了。
            (内部のタスクがもうなくなった。)
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskSchedulerStatus.ShutdownTimeout">
            <summary>
            <see cref="F:IteratorTasks.TaskSchedulerStatus.Shutdown"/> に入ってから、一定時間経過してもまだ内部のタスクが終わらなかったらこの状態に。
            </summary>
        </member>
        <member name="T:IteratorTasks.TaskStatus">
            <summary>
            タスクの実行状況。
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskStatus.Created">
            <summary>
            実行前。
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskStatus.Running">
            <summary>
            実行中。
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskStatus.RanToCompletion">
            <summary>
            正常終了。
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskStatus.Canceled">
            <summary>
            キャンセルされた。
            </summary>
        </member>
        <member name="F:IteratorTasks.TaskStatus.Faulted">
            <summary>
            例外が出て止まった。
            </summary>
        </member>
    </members>
</doc>
